import json
import boto3
import pandas as pd
from io import StringIO
from datetime import datetime
  

def album(data):
    album_list = []
    for row in data['items']:
        album_id = row['track']['album']['id']
        album_name = row['track']['album']['name']
        album_release_date = row['track']['album']['release_date']
        album_total_tracks = row['track']['album']['total_tracks']
        album_url = row['track']['album']['external_urls']['spotify']
        album_element = {'album_id':album_id,'name':album_name,'release_date':album_release_date,
                            'total_tracks':album_total_tracks,'url':album_url}
        album_list.append(album_element)
    return album_list

def artist(data):
    artist_list = []
    for row in data['items']:
        for key, value in row.items():
            if key == "track":
                for artist in value['artists']:
                    artist_dict = {'artist_id':artist['id'], 'artist_name':artist['name'], 'external_url': artist['href']}
                    artist_list.append(artist_dict)
    return artist_list

def song(data):
    song_list = []
    for row in data['items']:
        song_id = row['track']['id']
        song_name = row['track']['name']
        song_duration = row['track']['duration_ms']
        song_url = row['track']['external_urls']['spotify']
        song_popularity = row['track']['popularity']
        song_added = row['added_at']
        album_id = row['track']['album']['id']
        artist_id = row['track']['album']['artists'][0]['id']
        song_element = {'song_id':song_id,'song_name':song_name,'duration_ms':song_duration,'url':song_url,
                        'popularity':song_popularity,'song_added':song_added,'album_id':album_id,
                        'artist_id':artist_id
                    }
        song_list.append(song_element)
    return song_list

    
def lambda_handler(event, context):
    client=boto3.client('s3')
    Bucket='spotify-python-project'
    Key='RAW-DATA/Unprocessed-data/'

    spotify_data=[]
    spotify_keys=[]
    for file in client.list_objects(Bucket=Bucket,Prefix=Key)['Contents']:
        file_key=file['Key']
        if file_key.split('.')[-1]=='json':
            response=client.get_object(Bucket=Bucket,Key=file_key)
            content=response['Body']
            json_content=json.loads(content.read())
            spotify_keys.append(file_key)
            spotify_data.append(json_content) 
            for data in spotify_data:
                album_list=album(data)
                artist_list=artist(data)
                song_list=song(data)

                album_df = pd.DataFrame.from_dict(album_list)
                album_df = album_df.drop_duplicates(subset=['album_id'])
                artist_df = pd.DataFrame.from_dict(artist_list)
                artist_df = artist_df.drop_duplicates(subset=['artist_id'])
                song_df = pd.DataFrame.from_dict(song_list)
                song_df = song_df.drop_duplicates(subset=['song_id'])



                csv_buffer_album = StringIO()
                csv_buffer_artist = StringIO()
                csv_buffer_song = StringIO()
                album_df.to_csv(csv_buffer_album,index=False)
                artist_df.to_csv(csv_buffer_artist, index=False)
                song_df.to_csv(csv_buffer_song, index=False)
                song_key="TRANSFORMED-DATA/album_data/song_data_"+str(datetime.now())+".csv"
                client.put_object(Bucket=Bucket, Key=song_key, Body=csv_buffer_album.getvalue())
                artist_key="TRANSFORMED-DATA/artist_data/artist_data_"+str(datetime.now())+'.csv'
                client.put_object(Bucket=Bucket, Key=artist_key, Body=csv_buffer_artist.getvalue())
                album_key="TRANSFORMED-DATA/song_data/album_data_"+str(datetime.now())+'.csv'
                client.put_object(Bucket=Bucket, Key=album_key, Body=csv_buffer_song.getvalue())
                


                
    s3_resource = boto3.resource('s3')
    for key in spotify_keys:
        copy_source = {
            'Bucket': Bucket,
            'Key': key
        }
        s3_resource.meta.client.copy(copy_source, Bucket, 'RAW-DATA/processed-data/' + key.split("/")[-1])    
        s3_resource.Object(Bucket, key).delete()          
